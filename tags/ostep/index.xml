<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OSTEP on pi</title>
    <link>http://localhost:1313/tags/ostep/</link>
    <description>Recent content in OSTEP on pi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 05 Jul 2020 21:05:00 +0800</lastBuildDate>
    
	<atom:link href="http://localhost:1313/tags/ostep/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>OSTEP第9章 调度：比例份额</title>
      <link>http://localhost:1313/post/os/ostep_ch9/</link>
      <pubDate>Sun, 05 Jul 2020 21:05:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/os/ostep_ch9/</guid>
      <description>比例份额(proportional-share)又称公平份额(fair-share)，基于简单的想法：调度的最终目标是确保每个工作获得一定比</description>
    </item>
    
    <item>
      <title>OSTEP第8章 调度：多级反馈队列</title>
      <link>http://localhost:1313/post/os/ostep_ch8/</link>
      <pubDate>Sun, 05 Jul 2020 15:00:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/os/ostep_ch8/</guid>
      <description>多级反馈队列(Multi-level Feedback Queue, MLFQ) 优化周转时间：先执行短工作，但通常不知道工作要运行多久 优化响应时间：使用轮转，但轮转的周转时间很差</description>
    </item>
    
    <item>
      <title>OSTEP第7章 进程调度：介绍</title>
      <link>http://localhost:1313/post/os/ostep_ch7/</link>
      <pubDate>Tue, 30 Jun 2020 17:44:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/os/ostep_ch7/</guid>
      <description>工作负载假设 确定工作负载是构建调度策略的关键部分。对工作负载了解得越多，调度策略就越优 对进程（工作任务）进行如下假设，这些假设并不现实，随着</description>
    </item>
    
    <item>
      <title>OSTEP第6章 机制：受限直接执行</title>
      <link>http://localhost:1313/post/os/ostep_ch6/</link>
      <pubDate>Sun, 28 Jun 2020 00:43:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/os/ostep_ch6/</guid>
      <description>时分共享cpu：运行一个进程一段时间，然后运行另一个进程，如此轮换，实现虚拟化 时分共享要解决的问题：性能和OS控制权 如何不增加系统运行时开销</description>
    </item>
    
    <item>
      <title>OSTEP第5章 插叙：进程API</title>
      <link>http://localhost:1313/post/os/ostep_ch5/</link>
      <pubDate>Sat, 27 Jun 2020 13:44:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/os/ostep_ch5/</guid>
      <description>unix系统创建新进程的方式是一对系统调用fork()和exec()，系统调用wait()用于等待创建的子进程执行完 fork()系统调用 例子</description>
    </item>
    
    <item>
      <title>OSTEP第4章 抽象：进程</title>
      <link>http://localhost:1313/post/os/ostep_ch4/</link>
      <pubDate>Fri, 26 Jun 2020 23:49:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/os/ostep_ch4/</guid>
      <description>进程就是运行中的程序 时分共享(time sharing)：让一个进程只运行一个时间片，然后切换到其他进程，操作系统提供了存在多个虚拟cpu的假</description>
    </item>
    
    <item>
      <title>OSTEP第2章 操作系统介绍</title>
      <link>http://localhost:1313/post/os/ostep_ch2/</link>
      <pubDate>Fri, 26 Jun 2020 21:45:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/os/ostep_ch2/</guid>
      <description>冯诺依曼计算模型：处理器从内存中读取指令，对其解码、执行。完成一条指令后继续执行下一条，直到程序最终完成 操作系统要确保系统易于使用又高效运行</description>
    </item>
    
    <item>
      <title>OSTEP读书笔记合集</title>
      <link>http://localhost:1313/post/os/ostep/</link>
      <pubDate>Fri, 26 Jun 2020 02:35:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/os/ostep/</guid>
      <description>Operating Systems: Three Easy Pieces 资源 本书主页：http://pages.cs.wisc.edu/~remzi/OSTEP/ 中文版（分章pdf）：https://g</description>
    </item>
    
  </channel>
</rss>